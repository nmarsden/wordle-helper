{"mappings":"AAAO,MAAMA,EAAkeCI72oBC,cAICC,GACVC,KAAKD,eAAiBA,EAGhBE,oBAAoBC,GAC1B,GAAIA,EAAeC,OAAMC,GAAoC,WAArBA,EAAYC,OAClD,MAAO,OAGT,MAAMC,EAAwC,GAC9C,IAAK,IAAIC,EAAO,EAAGA,GAAQ,EAAGA,IAC5BD,EAAqBE,KAAKN,EAAeO,QAAOL,GAAeA,EAAYG,OAASA,KAGtF,IAAIG,EAA0B,cAC9B,IAAK,IAAIC,EAAE,EAAGA,EAAIL,EAAqBM,OAAQD,IAC7C,GAAIL,EAAqBK,GAAGC,OAAS,EAAG,CACtC,MAAMC,EAAYP,EAAqBK,GAAGF,QAAOL,GAAoC,WAArBA,EAAYC,OAAmBO,OACzFE,EAAaR,EAAqBK,GAAGF,QAAOL,GAAoC,YAArBA,EAAYC,OAAoBO,OAC3FG,EAAaT,EAAqBK,GAAGF,QAAOL,GAAoC,YAArBA,EAAYC,OAAoBO,OAC7FE,EAAaC,EAAa,EAC5BL,EAAS,cACAI,EAAaC,IAAe,GAAKF,EAAY,IACtDH,EAAS,OAIf,OAAOA,EAGDM,sBAAsBT,GAC5B,MAAMU,EAAmC,IAAIC,IAC7C,IAAK,IAAIP,EAAE,EAAGA,EAAEJ,EAAKK,OAAQD,IAAK,CAChC,MAAMQ,EAASZ,EAAKI,GACdS,EAAQH,EAAYI,IAAIF,GACzBC,EAGHH,EAAYK,IAAIH,EAAQC,EAAM,GAF9BH,EAAYK,IAAIH,EAAQ,GAK5B,OAAOF,EAGTM,cAAcC,GAEZ,MAAMC,EAAqBD,EAAaf,QAAOL,GAAoC,KAArBA,EAAYC,OAG1E,GAAkC,IAA9BoB,EAAmBb,OACrB,MAAO,GAIT,MAAMc,EAA6B,IAAIC,IACvCF,EAAmBG,SAAQxB,IACzBsB,EAAcG,IAAIzB,EAAYe,WAGhC,MAAMW,EAAoD,IAAIZ,IAC9DQ,EAAcE,SAAQG,IACpB,MAAM7B,EAAiBuB,EAAmBhB,QAAOL,GAAeA,EAAYe,SAAWY,IAEvFD,EAAqBR,IAAIS,EAAc/B,KAAKC,oBAAoBC,OAGlE,IAAI8B,EAAiBhC,KAAKD,eAG1B,MAAMkC,EAA0B,GAChCH,EAAqBF,SAAO,CAAEM,EAAWf,KACrB,SAAde,GACFD,EAAczB,KAAKW,MAGvBa,EAAiBA,EAAevB,QAAOF,GAAQ0B,EAAc9B,OAAMgB,IAAmC,IAAzBZ,EAAK4B,QAAQhB,OAG1F,MAAMiB,EAA2BX,EAAmBhB,QAAOL,GAAe,CAAC,UAAW,WAAWiC,SAASjC,EAAYC,QAAOiC,KAAIlC,GAAeA,EAAYe,SACxJiB,EAAyBxB,OAAS,IACpCoB,EAAiBA,EAAevB,QAAOF,GAAQ6B,EAAyBjC,OAAMgB,IAAmC,IAAzBZ,EAAK4B,QAAQhB,QAIvG,MAAMoB,EAA4Bd,EAAmBhB,QAAOL,GAAoC,YAArBA,EAAYC,OAAoBiC,KAAIlC,IAAW,CACxHe,OAAQf,EAAYe,OACpBqB,SAAUpC,EAAYoC,aAEpBD,EAA0B3B,OAAS,IACrCoB,EAAiBA,EAAevB,QAAOF,GAAQgC,EAA0BpC,OAAMsC,GACtElC,EAAKkC,EAAkBD,YAAcC,EAAkBtB,YAKlE,MAAMuB,EAA4BjB,EAAmBhB,QAAOL,GAAoC,YAArBA,EAAYC,OAAoBiC,KAAIlC,IAAW,CACxHe,OAAQf,EAAYe,OACpBqB,SAAUpC,EAAYoC,aAqBxB,OAnBIE,EAA0B9B,OAAS,IACrCoB,EAAiBA,EAAevB,QAAOF,GAAQmC,EAA0BvC,OAAMsC,GACtElC,EAAKkC,EAAkBD,YAAcC,EAAkBtB,YAKlEa,EAAiBA,EAAevB,QAAOF,IACrC,MAAMoC,EAAoB3C,KAAKgB,sBAAsBT,GACrD,IAAIqC,EAAW,EAOf,OANAd,EAAqBF,SAAO,CAAEM,EAAWf,KACvC,MAAMC,EAAQuB,EAAkBtB,IAAIF,IAAW,GAC5B,SAAde,GAAkC,IAAVd,GAA+B,QAAdc,GAAiC,IAAVd,GAA+B,gBAAdc,GAA+Bd,GAAQ,GAAqB,gBAAdc,GAA+Bd,GAAS,IAC1KwB,OAGGA,IAAad,EAAqBe,QAGpCb,EAAepB,OAAS,EAAIoB,EAAe,GAAK,UCrGrDc,gBAAN9C,KAmDI+C,kCAAqCC,IACjChD,KAAKiD,MAAMC,cAAcC,UAAUC,OAAO,SApDlDpD,KAuDIqD,oCAAuCL,IACnChD,KAAKiD,MAAMK,sBAAsBH,UAAUtB,IAAI,QAC/C7B,KAAKiD,MAAMM,cAAcJ,UAAUC,OAAO,SAzDlDpD,KA4DIwD,kCAAqCR,IACjChD,KAAKiD,MAAMC,cAAcC,UAAUtB,IAAI,SA7D/C7B,KAgEIyD,2BAA8BT,IAC1BhD,KAAKiD,MAAMM,cAAcJ,UAAUtB,IAAI,SAjE/C7B,KAoEI0D,qBAAwBV,SAC0B,IAAvChD,KAAK2D,MAAMC,yBACd5D,KAAK6D,eAET7D,KAAK8D,oBAxEb9D,KA2EI+D,oBAAuBf,IACnBhD,KAAKiD,MAAMM,cAAcJ,UAAUC,OAAO,SA5ElDpD,KA+EIgE,aAAgBhB,IACZ,MAAMiB,EAAMjB,EAAMkB,cAAcC,QAAQF,IACG,IAAvCjE,KAAK2D,MAAMC,yBAAyC,cAARK,GAG5CjE,KAAK2D,MAAMC,0BAA4B5D,KAAKiD,MAAMmB,iBAAiBxD,QAAkB,cAARqD,IAGrE,cAARA,EACAjE,KAAK6D,eAEL7D,KAAKqE,UAAUJ,GAGnBjE,KAAK8D,qBA7Fb9D,KAgGIsE,qBAAwBC,GACZvB,IACJ,GAAIuB,GAASvE,KAAK2D,MAAMC,wBACpB,OAEJ5D,KAAKiD,MAAMmB,iBAAiBG,GAAOpB,UAAUC,OAAO,gBAEpD,MAAMoB,EAvGZ1B,EAuG4C2B,gBAAgBtC,QAAQnC,KAAK2D,MAAMnC,aAAa+C,GAAOlE,MACvFqE,GAAgC,IAArBF,EAxGvB1B,EAwG+D2B,gBAAgBD,GAAoB,GACvFG,GAAgBH,EAAmB,GAAK,EACxCI,EA1GZ9B,EA0GmC2B,gBAAgBE,GAE7C3E,KAAKiD,MAAMmB,iBAAiBG,GAAOpB,UAAUC,OAAM,QAASsB,KAC5D1E,KAAKiD,MAAMmB,iBAAiBG,GAAOpB,UAAUtB,IAAG,QAAS+C,KACzD5E,KAAK2D,MAAMnC,aAAa+C,GAAOlE,KAAOuE,EAItC5E,KAAK8D,oBAlHjB9D,KAsHI6E,6BAAgC7B,IACxBhD,KAAK8E,2BAGT9E,KAAK2D,MAAMoB,WAAWC,MAAM,IAAIpD,QAAQ5B,KAAKqE,YA1HrDrE,KAiIIiF,YAAW,CAAI9D,EAAQqB,IAGZ,GApIfxC,KAiJI6D,aAAY,KACR7D,KAAK2D,MAAMC,0BACX5D,KAAKiD,MAAMmB,iBAAiBpE,KAAK2D,MAAMC,yBAAyBsB,YAAc,GAC9ElF,KAAKiD,MAAMmB,iBAAiBpE,KAAK2D,MAAMC,yBAAyBT,UAAUC,OAAO,gBACjFpD,KAAKiD,MAAMmB,iBAAiBpE,KAAK2D,MAAMC,yBAAyBT,UAAUC,OAAM,QAASpD,KAAK2D,MAAMnC,aAAaxB,KAAK2D,MAAMC,yBAAyBvD,QACrJL,KAAK2D,MAAMnC,aAAaxB,KAAK2D,MAAMC,yBAAyBzC,OAAS,GACrEnB,KAAK2D,MAAMnC,aAAaxB,KAAK2D,MAAMC,yBAAyBvD,KAAO,IAvJ3EL,KA0JIqE,UAAalD,IACT,MAAMqB,EAAWxC,KAAK2D,MAAMC,wBAA0B,EAChDvD,EAAOL,KAAKiF,YAAY9D,EAAQqB,GAEtCxC,KAAKiD,MAAMmB,iBAAiBpE,KAAK2D,MAAMC,yBAAyBsB,YAAc/D,EAC9EnB,KAAKiD,MAAMmB,iBAAiBpE,KAAK2D,MAAMC,yBAAyBT,UAAUtB,IAAa,KAATxB,EAAc,eAAc,QAAWA,KACrHL,KAAK2D,MAAMnC,aAAaxB,KAAK2D,MAAMC,yBAAyBzC,OAASA,EACrEnB,KAAK2D,MAAMnC,aAAaxB,KAAK2D,MAAMC,yBAAyBvD,KAAOA,EACnEL,KAAK2D,MAAMC,2BAlKnB5D,KAqKImF,eAAc,CAAIhE,EAAQqB,IA0Bf,GA/LfxC,KAkMI8E,wBAAuB,IACZ9E,KAAK2D,MAAMC,wBAA0B,IACrC5D,KAAK2D,MAAMC,wBAA0B,GAAM,GACjB,KAA1B5D,KAAK2D,MAAMoB,YACV/E,KAAK2D,MAAMC,wBAA0B,GAAK5D,KAAK2D,MAAMnC,aAAa4D,MAAMpF,KAAK2D,MAAMC,wBAA0B,EAAG5D,KAAK2D,MAAMC,yBAAyBtB,KAAI+C,GAAKA,EAAElE,SAAQmE,KAAK,MAAQtF,KAAK2D,MAAMoB,YAChM/E,KAAK2D,MAAMnC,aAAa+D,MAAKnF,GAAsC,KAAvBA,EAAYe,QAAsC,KAArBf,EAAYC,OAvMpGL,KA0MI8D,iBAAgB,KACZ9D,KAAK2D,MAAMoB,WAAa/E,KAAKwF,cAAcjE,cAAcvB,KAAK2D,MAAMnC,cAGpE,MAAMiE,EAA+C,KAA1BzF,KAAK2D,MAAMoB,WAAqB,IAAIW,MAAM,GAAGC,KAAK,IAAM3F,KAAK2D,MAAMoB,WAAWC,MAAM,IAC/GhF,KAAKiD,MAAM2C,sBAAsBhE,SAAO,CAAEiE,EAAMtB,KAC5CsB,EAAKX,YAAcO,EAAkBlB,GAhN3CzB,EAiNmB2B,gBAAgB7C,SAAQvB,GAAQwF,EAAK1C,UAAUC,OAAM,QAAS/C,OAC3E,MAAMyF,EAAO9F,KAAKmF,eAAeM,EAAkBlB,GAAQA,GAC9C,KAATuB,GACAD,EAAK1C,UAAUtB,IAAG,QAASiE,QAK/B9F,KAAK8E,0BACL9E,KAAKiD,MAAM8C,wBAAwB5C,UAAUtB,IAAI,YAEjD7B,KAAKiD,MAAM8C,wBAAwB5C,UAAUC,OAAO,aAhNxDpD,KAAKwF,cAAgB,IAAI1F,EAAcD,GACvCG,KAAKiD,MAAQ,CACTK,sBAAuB0C,SAASC,eAAe,qBAC/CC,6BAA8BF,SAASC,eAAe,iCACtDE,+BAAgCH,SAASC,eAAe,mCACxD/C,cAAe8C,SAASC,eAAe,aACvCG,6BAA8BJ,SAASC,eAAe,4BACtD1C,cAAeyC,SAASC,eAAe,aACvCI,sBAAuBL,SAASC,eAAe,qBAC/CK,gBAAiBN,SAASC,eAAe,eACzCM,eAAgBP,SAASC,eAAe,cACxCO,SAAUR,SAASS,iBAAiB,kBACpCrC,iBAAkB4B,SAASS,iBAAiB,yBAC5Cb,sBAAuBI,SAASS,iBAAiB,gCACjDV,wBAAyBC,SAASC,eAAe,cAErDjG,KAAK2D,MAAQ,CACTC,wBAAyB,EACzBpC,aAAc,IAAIkE,MAAM1F,KAAKiD,MAAMmB,iBAAiBxD,QACpDmE,WAAY,IAEhB,IAAK,IAAIpE,EAAE,EAAGA,EAAGX,KAAKiD,MAAMmB,iBAAiBxD,OAAQD,IACjDX,KAAK2D,MAAMnC,aAAab,GAAK,CAACQ,OAAQ,GAAId,KAAM,GAAImC,SAAW7B,EAAI,EAAIJ,KAAMmG,KAAKC,MAAMhG,EAAI,IAEhGX,KAAKiD,MAAMiD,6BAA6BU,iBAAiB,QAAS5G,KAAK+C,mCACvE/C,KAAKiD,MAAMkD,+BAA+BS,iBAAiB,QAAS5G,KAAKqD,qCACzErD,KAAKiD,MAAMmD,6BAA6BQ,iBAAiB,QAAS5G,KAAKwD,mCACvExD,KAAKiD,MAAMoD,sBAAsBO,iBAAiB,QAAS5G,KAAKyD,4BAChEzD,KAAKiD,MAAMqD,gBAAgBM,iBAAiB,QAAS5G,KAAK0D,sBAC1D1D,KAAKiD,MAAMsD,eAAeK,iBAAiB,QAAS5G,KAAK+D,qBACzD/D,KAAKiD,MAAMuD,SAAS5E,SAAQiE,GAAQA,EAAKe,iBAAiB,QAAS5G,KAAKgE,gBACxEhE,KAAKiD,MAAMmB,iBAAiBxC,SAAO,CAAEiE,EAAMtB,IAAUsB,EAAKe,iBAAiB,QAAS5G,KAAKsE,qBAAqBC,MAC9GvE,KAAKiD,MAAM8C,wBAAwBa,iBAAiB,QAAS5G,KAAK6E,+BA5CpE/B,EASK2B,gBAA0B,CAAC,SAAU,UAAW,WAwN3DoC,OAAOC,OAAM,KACT,IAAIhE","sources":["src/globals.ts","src/wordSuggester.ts","src/app.ts"],"sourcesContent":["export const AVAILABLE_WORDS = [\"cigar\", \"rebut\", \"sissy\", \"humph\", \"awake\", \"blush\", \"focal\", \"evade\", \"naval\", \"serve\", \"heath\", \"dwarf\", \"model\", \"karma\", \"stink\", \"grade\", \"quiet\", \"bench\", \"abate\", \"feign\", \"major\", \"death\", \"fresh\", \"crust\", \"stool\", \"colon\", \"abase\", \"marry\", \"react\", \"batty\", \"pride\", \"floss\", \"helix\", \"croak\", \"staff\", \"paper\", \"unfed\", \"whelp\", \"trawl\", \"outdo\", \"adobe\", \"crazy\", \"sower\", \"repay\", \"digit\", \"crate\", \"cluck\", \"spike\", \"mimic\", \"pound\", \"maxim\", \"linen\", \"unmet\", \"flesh\", \"booby\", \"forth\", \"first\", \"stand\", \"belly\", \"ivory\", \"seedy\", \"print\", \"yearn\", \"drain\", \"bribe\", \"stout\", \"panel\", \"crass\", \"flume\", \"offal\", \"agree\", \"error\", \"swirl\", \"argue\", \"bleed\", \"delta\", \"flick\", \"totem\", \"wooer\", \"front\", \"shrub\", \"parry\", \"biome\", \"lapel\", \"start\", \"greet\", \"goner\", \"golem\", \"lusty\", \"loopy\", \"round\", \"audit\", \"lying\", \"gamma\", \"labor\", \"islet\", \"civic\", \"forge\", \"corny\", \"moult\", \"basic\", \"salad\", \"agate\", \"spicy\", \"spray\", \"essay\", \"fjord\", \"spend\", \"kebab\", \"guild\", \"aback\", \"motor\", \"alone\", \"hatch\", \"hyper\", \"thumb\", \"dowry\", \"ought\", \"belch\", \"dutch\", \"pilot\", \"tweed\", \"comet\", \"jaunt\", \"enema\", \"steed\", \"abyss\", \"growl\", \"fling\", \"dozen\", \"boozy\", \"erode\", \"world\", \"gouge\", \"click\", \"briar\", \"great\", \"altar\", \"pulpy\", \"blurt\", \"coast\", \"duchy\", \"groin\", \"fixer\", \"group\", \"rogue\", \"badly\", \"smart\", \"pithy\", \"gaudy\", \"chill\", \"heron\", \"vodka\", \"finer\", \"surer\", \"radio\", \"rouge\", \"perch\", \"retch\", \"wrote\", \"clock\", \"tilde\", \"store\", \"prove\", \"bring\", \"solve\", \"cheat\", \"grime\", \"exult\", \"usher\", \"epoch\", \"triad\", \"break\", \"rhino\", \"viral\", \"conic\", \"masse\", \"sonic\", \"vital\", \"trace\", \"using\", \"peach\", \"champ\", \"baton\", \"brake\", \"pluck\", \"craze\", \"gripe\", \"weary\", \"picky\", \"acute\", \"ferry\", \"aside\", \"tapir\", \"troll\", \"unify\", \"rebus\", \"boost\", \"truss\", \"siege\", \"tiger\", \"banal\", \"slump\", \"crank\", \"gorge\", \"query\", \"drink\", \"favor\", \"abbey\", \"tangy\", \"panic\", \"solar\", \"shire\", \"proxy\", \"point\", \"robot\", \"prick\", \"wince\", \"crimp\", \"knoll\", \"sugar\", \"whack\", \"mount\", \"perky\", \"could\", \"wrung\", \"light\", \"those\", \"moist\", \"shard\", \"pleat\", \"aloft\", \"skill\", \"elder\", \"frame\", \"humor\", \"pause\", \"ulcer\", \"ultra\", \"robin\", \"cynic\", \"agora\", \"aroma\", \"caulk\", \"shake\", \"pupal\", \"dodge\", \"swill\", \"tacit\", \"other\", \"thorn\", \"trove\", \"bloke\", \"vivid\", \"spill\", \"chant\", \"choke\", \"rupee\", \"nasty\", \"mourn\", \"ahead\", \"brine\", \"cloth\", \"hoard\", \"sweet\", \"month\", \"lapse\", \"watch\", \"today\", \"focus\", \"smelt\", \"tease\", \"cater\", \"movie\", \"lynch\", \"saute\", \"allow\", \"renew\", \"their\", \"slosh\", \"purge\", \"chest\", \"depot\", \"epoxy\", \"nymph\", \"found\", \"shall\", \"harry\", \"stove\", \"lowly\", \"snout\", \"trope\", \"fewer\", \"shawl\", \"natal\", \"fibre\", \"comma\", \"foray\", \"scare\", \"stair\", \"black\", \"squad\", \"royal\", \"chunk\", \"mince\", \"slave\", \"shame\", \"cheek\", \"ample\", \"flair\", \"foyer\", \"cargo\", \"oxide\", \"plant\", \"olive\", \"inert\", \"askew\", \"heist\", \"shown\", \"zesty\", \"hasty\", \"trash\", \"fella\", \"larva\", \"forgo\", \"story\", \"hairy\", \"train\", \"homer\", \"badge\", \"midst\", \"canny\", \"fetus\", \"butch\", \"farce\", \"slung\", \"tipsy\", \"metal\", \"yield\", \"delve\", \"being\", \"scour\", \"glass\", \"gamer\", \"scrap\", \"money\", \"hinge\", \"album\", \"vouch\", \"asset\", \"tiara\", \"crept\", \"bayou\", \"atoll\", \"manor\", \"creak\", \"showy\", \"phase\", \"froth\", \"depth\", \"gloom\", \"flood\", \"trait\", \"girth\", \"piety\", \"payer\", \"goose\", \"float\", \"donor\", \"atone\", \"primo\", \"apron\", \"blown\", \"cacao\", \"loser\", \"input\", \"gloat\", \"awful\", \"brink\", \"smite\", \"beady\", \"rusty\", \"retro\", \"droll\", \"gawky\", \"hutch\", \"pinto\", \"gaily\", \"egret\", \"lilac\", \"sever\", \"field\", \"fluff\", \"hydro\", \"flack\", \"agape\", \"wench\", \"voice\", \"stead\", \"stalk\", \"berth\", \"madam\", \"night\", \"bland\", \"liver\", \"wedge\", \"augur\", \"roomy\", \"wacky\", \"flock\", \"angry\", \"bobby\", \"trite\", \"aphid\", \"tryst\", \"midge\", \"power\", \"elope\", \"cinch\", \"motto\", \"stomp\", \"upset\", \"bluff\", \"cramp\", \"quart\", \"coyly\", \"youth\", \"rhyme\", \"buggy\", \"alien\", \"smear\", \"unfit\", \"patty\", \"cling\", \"glean\", \"label\", \"hunky\", \"khaki\", \"poker\", \"gruel\", \"twice\", \"twang\", \"shrug\", \"treat\", \"unlit\", \"waste\", \"merit\", \"woven\", \"octal\", \"needy\", \"clown\", \"widow\", \"irony\", \"ruder\", \"gauze\", \"chief\", \"onset\", \"prize\", \"fungi\", \"charm\", \"gully\", \"inter\", \"whoop\", \"taunt\", \"leery\", \"class\", \"theme\", \"lofty\", \"tibia\", \"booze\", \"alpha\", \"thyme\", \"eclat\", \"doubt\", \"parer\", \"chute\", \"stick\", \"trice\", \"alike\", \"sooth\", \"recap\", \"saint\", \"liege\", \"glory\", \"grate\", \"admit\", \"brisk\", \"soggy\", \"usurp\", \"scald\", \"scorn\", \"leave\", \"twine\", \"sting\", \"bough\", \"marsh\", \"sloth\", \"dandy\", \"vigor\", \"howdy\", \"enjoy\", \"valid\", \"ionic\", \"equal\", \"unset\", \"floor\", \"catch\", \"spade\", \"stein\", \"exist\", \"quirk\", \"denim\", \"grove\", \"spiel\", \"mummy\", \"fault\", \"foggy\", \"flout\", \"carry\", \"sneak\", \"libel\", \"waltz\", \"aptly\", \"piney\", \"inept\", \"aloud\", \"photo\", \"dream\", \"stale\", \"vomit\", \"ombre\", \"fanny\", \"unite\", \"snarl\", \"baker\", \"there\", \"glyph\", \"pooch\", \"hippy\", \"spell\", \"folly\", \"louse\", \"gulch\", \"vault\", \"godly\", \"threw\", \"fleet\", \"grave\", \"inane\", \"shock\", \"crave\", \"spite\", \"valve\", \"skimp\", \"claim\", \"rainy\", \"musty\", \"pique\", \"daddy\", \"quasi\", \"arise\", \"aging\", \"valet\", \"opium\", \"avert\", \"stuck\", \"recut\", \"mulch\", \"genre\", \"plume\", \"rifle\", \"count\", \"incur\", \"total\", \"wrest\", \"mocha\", \"deter\", \"study\", \"lover\", \"safer\", \"rivet\", \"funny\", \"smoke\", \"mound\", \"undue\", \"sedan\", \"pagan\", \"swine\", \"guile\", \"gusty\", \"equip\", \"tough\", \"canoe\", \"chaos\", \"covet\", \"human\", \"udder\", \"lunch\", \"blast\", \"stray\", \"manga\", \"melee\", \"lefty\", \"quick\", \"paste\", \"given\", \"octet\", \"risen\", \"groan\", \"leaky\", \"grind\", \"carve\", \"loose\", \"sadly\", \"spilt\", \"apple\", \"slack\", \"honey\", \"final\", \"sheen\", \"eerie\", \"minty\", \"slick\", \"derby\", \"wharf\", \"spelt\", \"coach\", \"erupt\", \"singe\", \"price\", \"spawn\", \"fairy\", \"jiffy\", \"filmy\", \"stack\", \"chose\", \"sleep\", \"ardor\", \"nanny\", \"niece\", \"woozy\", \"handy\", \"grace\", \"ditto\", \"stank\", \"cream\", \"usual\", \"diode\", \"valor\", \"angle\", \"ninja\", \"muddy\", \"chase\", \"reply\", \"prone\", \"spoil\", \"heart\", \"shade\", \"diner\", \"arson\", \"onion\", \"sleet\", \"dowel\", \"couch\", \"palsy\", \"bowel\", \"smile\", \"evoke\", \"creek\", \"lance\", \"eagle\", \"idiot\", \"siren\", \"built\", \"embed\", \"award\", \"dross\", \"annul\", \"goody\", \"frown\", \"patio\", \"laden\", \"humid\", \"elite\", \"lymph\", \"edify\", \"might\", \"reset\", \"visit\", \"gusto\", \"purse\", \"vapor\", \"crock\", \"write\", \"sunny\", \"loath\", \"chaff\", \"slide\", \"queer\", \"venom\", \"stamp\", \"sorry\", \"still\", \"acorn\", \"aping\", \"pushy\", \"tamer\", \"hater\", \"mania\", \"awoke\", \"brawn\", \"swift\", \"exile\", \"birch\", \"lucky\", \"freer\", \"risky\", \"ghost\", \"plier\", \"lunar\", \"winch\", \"snare\", \"nurse\", \"house\", \"borax\", \"nicer\", \"lurch\", \"exalt\", \"about\", \"savvy\", \"toxin\", \"tunic\", \"pried\", \"inlay\", \"chump\", \"lanky\", \"cress\", \"eater\", \"elude\", \"cycle\", \"kitty\", \"boule\", \"moron\", \"tenet\", \"place\", \"lobby\", \"plush\", \"vigil\", \"index\", \"blink\", \"clung\", \"qualm\", \"croup\", \"clink\", \"juicy\", \"stage\", \"decay\", \"nerve\", \"flier\", \"shaft\", \"crook\", \"clean\", \"china\", \"ridge\", \"vowel\", \"gnome\", \"snuck\", \"icing\", \"spiny\", \"rigor\", \"snail\", \"flown\", \"rabid\", \"prose\", \"thank\", \"poppy\", \"budge\", \"fiber\", \"moldy\", \"dowdy\", \"kneel\", \"track\", \"caddy\", \"quell\", \"dumpy\", \"paler\", \"swore\", \"rebar\", \"scuba\", \"splat\", \"flyer\", \"horny\", \"mason\", \"doing\", \"ozone\", \"amply\", \"molar\", \"ovary\", \"beset\", \"queue\", \"cliff\", \"magic\", \"truce\", \"sport\", \"fritz\", \"edict\", \"twirl\", \"verse\", \"llama\", \"eaten\", \"range\", \"whisk\", \"hovel\", \"rehab\", \"macaw\", \"sigma\", \"spout\", \"verve\", \"sushi\", \"dying\", \"fetid\", \"brain\", \"buddy\", \"thump\", \"scion\", \"candy\", \"chord\", \"basin\", \"march\", \"crowd\", \"arbor\", \"gayly\", \"musky\", \"stain\", \"dally\", \"bless\", \"bravo\", \"stung\", \"title\", \"ruler\", \"kiosk\", \"blond\", \"ennui\", \"layer\", \"fluid\", \"tatty\", \"score\", \"cutie\", \"zebra\", \"barge\", \"matey\", \"bluer\", \"aider\", \"shook\", \"river\", \"privy\", \"betel\", \"frisk\", \"bongo\", \"begun\", \"azure\", \"weave\", \"genie\", \"sound\", \"glove\", \"braid\", \"scope\", \"wryly\", \"rover\", \"assay\", \"ocean\", \"bloom\", \"irate\", \"later\", \"woken\", \"silky\", \"wreck\", \"dwelt\", \"slate\", \"smack\", \"solid\", \"amaze\", \"hazel\", \"wrist\", \"jolly\", \"globe\", \"flint\", \"rouse\", \"civil\", \"vista\", \"relax\", \"cover\", \"alive\", \"beech\", \"jetty\", \"bliss\", \"vocal\", \"often\", \"dolly\", \"eight\", \"joker\", \"since\", \"event\", \"ensue\", \"shunt\", \"diver\", \"poser\", \"worst\", \"sweep\", \"alley\", \"creed\", \"anime\", \"leafy\", \"bosom\", \"dunce\", \"stare\", \"pudgy\", \"waive\", \"choir\", \"stood\", \"spoke\", \"outgo\", \"delay\", \"bilge\", \"ideal\", \"clasp\", \"seize\", \"hotly\", \"laugh\", \"sieve\", \"block\", \"meant\", \"grape\", \"noose\", \"hardy\", \"shied\", \"drawl\", \"daisy\", \"putty\", \"strut\", \"burnt\", \"tulip\", \"crick\", \"idyll\", \"vixen\", \"furor\", \"geeky\", \"cough\", \"naive\", \"shoal\", \"stork\", \"bathe\", \"aunty\", \"check\", \"prime\", \"brass\", \"outer\", \"furry\", \"razor\", \"elect\", \"evict\", \"imply\", \"demur\", \"quota\", \"haven\", \"cavil\", \"swear\", \"crump\", \"dough\", \"gavel\", \"wagon\", \"salon\", \"nudge\", \"harem\", \"pitch\", \"sworn\", \"pupil\", \"excel\", \"stony\", \"cabin\", \"unzip\", \"queen\", \"trout\", \"polyp\", \"earth\", \"storm\", \"until\", \"taper\", \"enter\", \"child\", \"adopt\", \"minor\", \"fatty\", \"husky\", \"brave\", \"filet\", \"slime\", \"glint\", \"tread\", \"steal\", \"regal\", \"guest\", \"every\", \"murky\", \"share\", \"spore\", \"hoist\", \"buxom\", \"inner\", \"otter\", \"dimly\", \"level\", \"sumac\", \"donut\", \"stilt\", \"arena\", \"sheet\", \"scrub\", \"fancy\", \"slimy\", \"pearl\", \"silly\", \"porch\", \"dingo\", \"sepia\", \"amble\", \"shady\", \"bread\", \"friar\", \"reign\", \"dairy\", \"quill\", \"cross\", \"brood\", \"tuber\", \"shear\", \"posit\", \"blank\", \"villa\", \"shank\", \"piggy\", \"freak\", \"which\", \"among\", \"fecal\", \"shell\", \"would\", \"algae\", \"large\", \"rabbi\", \"agony\", \"amuse\", \"bushy\", \"copse\", \"swoon\", \"knife\", \"pouch\", \"ascot\", \"plane\", \"crown\", \"urban\", \"snide\", \"relay\", \"abide\", \"viola\", \"rajah\", \"straw\", \"dilly\", \"crash\", \"amass\", \"third\", \"trick\", \"tutor\", \"woody\", \"blurb\", \"grief\", \"disco\", \"where\", \"sassy\", \"beach\", \"sauna\", \"comic\", \"clued\", \"creep\", \"caste\", \"graze\", \"snuff\", \"frock\", \"gonad\", \"drunk\", \"prong\", \"lurid\", \"steel\", \"halve\", \"buyer\", \"vinyl\", \"utile\", \"smell\", \"adage\", \"worry\", \"tasty\", \"local\", \"trade\", \"finch\", \"ashen\", \"modal\", \"gaunt\", \"clove\", \"enact\", \"adorn\", \"roast\", \"speck\", \"sheik\", \"missy\", \"grunt\", \"snoop\", \"party\", \"touch\", \"mafia\", \"emcee\", \"array\", \"south\", \"vapid\", \"jelly\", \"skulk\", \"angst\", \"tubal\", \"lower\", \"crest\", \"sweat\", \"cyber\", \"adore\", \"tardy\", \"swami\", \"notch\", \"groom\", \"roach\", \"hitch\", \"young\", \"align\", \"ready\", \"frond\", \"strap\", \"puree\", \"realm\", \"venue\", \"swarm\", \"offer\", \"seven\", \"dryer\", \"diary\", \"dryly\", \"drank\", \"acrid\", \"heady\", \"theta\", \"junto\", \"pixie\", \"quoth\", \"bonus\", \"shalt\", \"penne\", \"amend\", \"datum\", \"build\", \"piano\", \"shelf\", \"lodge\", \"suing\", \"rearm\", \"coral\", \"ramen\", \"worth\", \"psalm\", \"infer\", \"overt\", \"mayor\", \"ovoid\", \"glide\", \"usage\", \"poise\", \"randy\", \"chuck\", \"prank\", \"fishy\", \"tooth\", \"ether\", \"drove\", \"idler\", \"swath\", \"stint\", \"while\", \"begat\", \"apply\", \"slang\", \"tarot\", \"radar\", \"credo\", \"aware\", \"canon\", \"shift\", \"timer\", \"bylaw\", \"serum\", \"three\", \"steak\", \"iliac\", \"shirk\", \"blunt\", \"puppy\", \"penal\", \"joist\", \"bunny\", \"shape\", \"beget\", \"wheel\", \"adept\", \"stunt\", \"stole\", \"topaz\", \"chore\", \"fluke\", \"afoot\", \"bloat\", \"bully\", \"dense\", \"caper\", \"sneer\", \"boxer\", \"jumbo\", \"lunge\", \"space\", \"avail\", \"short\", \"slurp\", \"loyal\", \"flirt\", \"pizza\", \"conch\", \"tempo\", \"droop\", \"plate\", \"bible\", \"plunk\", \"afoul\", \"savoy\", \"steep\", \"agile\", \"stake\", \"dwell\", \"knave\", \"beard\", \"arose\", \"motif\", \"smash\", \"broil\", \"glare\", \"shove\", \"baggy\", \"mammy\", \"swamp\", \"along\", \"rugby\", \"wager\", \"quack\", \"squat\", \"snaky\", \"debit\", \"mange\", \"skate\", \"ninth\", \"joust\", \"tramp\", \"spurn\", \"medal\", \"micro\", \"rebel\", \"flank\", \"learn\", \"nadir\", \"maple\", \"comfy\", \"remit\", \"gruff\", \"ester\", \"least\", \"mogul\", \"fetch\", \"cause\", \"oaken\", \"aglow\", \"meaty\", \"gaffe\", \"shyly\", \"racer\", \"prowl\", \"thief\", \"stern\", \"poesy\", \"rocky\", \"tweet\", \"waist\", \"spire\", \"grope\", \"havoc\", \"patsy\", \"truly\", \"forty\", \"deity\", \"uncle\", \"swish\", \"giver\", \"preen\", \"bevel\", \"lemur\", \"draft\", \"slope\", \"annoy\", \"lingo\", \"bleak\", \"ditty\", \"curly\", \"cedar\", \"dirge\", \"grown\", \"horde\", \"drool\", \"shuck\", \"crypt\", \"cumin\", \"stock\", \"gravy\", \"locus\", \"wider\", \"breed\", \"quite\", \"chafe\", \"cache\", \"blimp\", \"deign\", \"fiend\", \"logic\", \"cheap\", \"elide\", \"rigid\", \"false\", \"renal\", \"pence\", \"rowdy\", \"shoot\", \"blaze\", \"envoy\", \"posse\", \"brief\", \"never\", \"abort\", \"mouse\", \"mucky\", \"sulky\", \"fiery\", \"media\", \"trunk\", \"yeast\", \"clear\", \"skunk\", \"scalp\", \"bitty\", \"cider\", \"koala\", \"duvet\", \"segue\", \"creme\", \"super\", \"grill\", \"after\", \"owner\", \"ember\", \"reach\", \"nobly\", \"empty\", \"speed\", \"gipsy\", \"recur\", \"smock\", \"dread\", \"merge\", \"burst\", \"kappa\", \"amity\", \"shaky\", \"hover\", \"carol\", \"snort\", \"synod\", \"faint\", \"haunt\", \"flour\", \"chair\", \"detox\", \"shrew\", \"tense\", \"plied\", \"quark\", \"burly\", \"novel\", \"waxen\", \"stoic\", \"jerky\", \"blitz\", \"beefy\", \"lyric\", \"hussy\", \"towel\", \"quilt\", \"below\", \"bingo\", \"wispy\", \"brash\", \"scone\", \"toast\", \"easel\", \"saucy\", \"value\", \"spice\", \"honor\", \"route\", \"sharp\", \"bawdy\", \"radii\", \"skull\", \"phony\", \"issue\", \"lager\", \"swell\", \"urine\", \"gassy\", \"trial\", \"flora\", \"upper\", \"latch\", \"wight\", \"brick\", \"retry\", \"holly\", \"decal\", \"grass\", \"shack\", \"dogma\", \"mover\", \"defer\", \"sober\", \"optic\", \"crier\", \"vying\", \"nomad\", \"flute\", \"hippo\", \"shark\", \"drier\", \"obese\", \"bugle\", \"tawny\", \"chalk\", \"feast\", \"ruddy\", \"pedal\", \"scarf\", \"cruel\", \"bleat\", \"tidal\", \"slush\", \"semen\", \"windy\", \"dusty\", \"sally\", \"igloo\", \"nerdy\", \"jewel\", \"shone\", \"whale\", \"hymen\", \"abuse\", \"fugue\", \"elbow\", \"crumb\", \"pansy\", \"welsh\", \"syrup\", \"terse\", \"suave\", \"gamut\", \"swung\", \"drake\", \"freed\", \"afire\", \"shirt\", \"grout\", \"oddly\", \"tithe\", \"plaid\", \"dummy\", \"broom\", \"blind\", \"torch\", \"enemy\", \"again\", \"tying\", \"pesky\", \"alter\", \"gazer\", \"noble\", \"ethos\", \"bride\", \"extol\", \"decor\", \"hobby\", \"beast\", \"idiom\", \"utter\", \"these\", \"sixth\", \"alarm\", \"erase\", \"elegy\", \"spunk\", \"piper\", \"scaly\", \"scold\", \"hefty\", \"chick\", \"sooty\", \"canal\", \"whiny\", \"slash\", \"quake\", \"joint\", \"swept\", \"prude\", \"heavy\", \"wield\", \"femme\", \"lasso\", \"maize\", \"shale\", \"screw\", \"spree\", \"smoky\", \"whiff\", \"scent\", \"glade\", \"spent\", \"prism\", \"stoke\", \"riper\", \"orbit\", \"cocoa\", \"guilt\", \"humus\", \"shush\", \"table\", \"smirk\", \"wrong\", \"noisy\", \"alert\", \"shiny\", \"elate\", \"resin\", \"whole\", \"hunch\", \"pixel\", \"polar\", \"hotel\", \"sword\", \"cleat\", \"mango\", \"rumba\", \"puffy\", \"filly\", \"billy\", \"leash\", \"clout\", \"dance\", \"ovate\", \"facet\", \"chili\", \"paint\", \"liner\", \"curio\", \"salty\", \"audio\", \"snake\", \"fable\", \"cloak\", \"navel\", \"spurt\", \"pesto\", \"balmy\", \"flash\", \"unwed\", \"early\", \"churn\", \"weedy\", \"stump\", \"lease\", \"witty\", \"wimpy\", \"spoof\", \"saner\", \"blend\", \"salsa\", \"thick\", \"warty\", \"manic\", \"blare\", \"squib\", \"spoon\", \"probe\", \"crepe\", \"knack\", \"force\", \"debut\", \"order\", \"haste\", \"teeth\", \"agent\", \"widen\", \"icily\", \"slice\", \"ingot\", \"clash\", \"juror\", \"blood\", \"abode\", \"throw\", \"unity\", \"pivot\", \"slept\", \"troop\", \"spare\", \"sewer\", \"parse\", \"morph\", \"cacti\", \"tacky\", \"spool\", \"demon\", \"moody\", \"annex\", \"begin\", \"fuzzy\", \"patch\", \"water\", \"lumpy\", \"admin\", \"omega\", \"limit\", \"tabby\", \"macho\", \"aisle\", \"skiff\", \"basis\", \"plank\", \"verge\", \"botch\", \"crawl\", \"lousy\", \"slain\", \"cubic\", \"raise\", \"wrack\", \"guide\", \"foist\", \"cameo\", \"under\", \"actor\", \"revue\", \"fraud\", \"harpy\", \"scoop\", \"climb\", \"refer\", \"olden\", \"clerk\", \"debar\", \"tally\", \"ethic\", \"cairn\", \"tulle\", \"ghoul\", \"hilly\", \"crude\", \"apart\", \"scale\", \"older\", \"plain\", \"sperm\", \"briny\", \"abbot\", \"rerun\", \"quest\", \"crisp\", \"bound\", \"befit\", \"drawn\", \"suite\", \"itchy\", \"cheer\", \"bagel\", \"guess\", \"broad\", \"axiom\", \"chard\", \"caput\", \"leant\", \"harsh\", \"curse\", \"proud\", \"swing\", \"opine\", \"taste\", \"lupus\", \"gumbo\", \"miner\", \"green\", \"chasm\", \"lipid\", \"topic\", \"armor\", \"brush\", \"crane\", \"mural\", \"abled\", \"habit\", \"bossy\", \"maker\", \"dusky\", \"dizzy\", \"lithe\", \"brook\", \"jazzy\", \"fifty\", \"sense\", \"giant\", \"surly\", \"legal\", \"fatal\", \"flunk\", \"began\", \"prune\", \"small\", \"slant\", \"scoff\", \"torus\", \"ninny\", \"covey\", \"viper\", \"taken\", \"moral\", \"vogue\", \"owing\", \"token\", \"entry\", \"booth\", \"voter\", \"chide\", \"elfin\", \"ebony\", \"neigh\", \"minim\", \"melon\", \"kneed\", \"decoy\", \"voila\", \"ankle\", \"arrow\", \"mushy\", \"tribe\", \"cease\", \"eager\", \"birth\", \"graph\", \"odder\", \"terra\", \"weird\", \"tried\", \"clack\", \"color\", \"rough\", \"weigh\", \"uncut\", \"ladle\", \"strip\", \"craft\", \"minus\", \"dicey\", \"titan\", \"lucid\", \"vicar\", \"dress\", \"ditch\", \"gypsy\", \"pasta\", \"taffy\", \"flame\", \"swoop\", \"aloof\", \"sight\", \"broke\", \"teary\", \"chart\", \"sixty\", \"wordy\", \"sheer\", \"leper\", \"nosey\", \"bulge\", \"savor\", \"clamp\", \"funky\", \"foamy\", \"toxic\", \"brand\", \"plumb\", \"dingy\", \"butte\", \"drill\", \"tripe\", \"bicep\", \"tenor\", \"krill\", \"worse\", \"drama\", \"hyena\", \"think\", \"ratio\", \"cobra\", \"basil\", \"scrum\", \"bused\", \"phone\", \"court\", \"camel\", \"proof\", \"heard\", \"angel\", \"petal\", \"pouty\", \"throb\", \"maybe\", \"fetal\", \"sprig\", \"spine\", \"shout\", \"cadet\", \"macro\", \"dodgy\", \"satyr\", \"rarer\", \"binge\", \"trend\", \"nutty\", \"leapt\", \"amiss\", \"split\", \"myrrh\", \"width\", \"sonar\", \"tower\", \"baron\", \"fever\", \"waver\", \"spark\", \"belie\", \"sloop\", \"expel\", \"smote\", \"baler\", \"above\", \"north\", \"wafer\", \"scant\", \"frill\", \"awash\", \"snack\", \"scowl\", \"frail\", \"drift\", \"limbo\", \"fence\", \"motel\", \"ounce\", \"wreak\", \"revel\", \"talon\", \"prior\", \"knelt\", \"cello\", \"flake\", \"debug\", \"anode\", \"crime\", \"salve\", \"scout\", \"imbue\", \"pinky\", \"stave\", \"vague\", \"chock\", \"fight\", \"video\", \"stone\", \"teach\", \"cleft\", \"frost\", \"prawn\", \"booty\", \"twist\", \"apnea\", \"stiff\", \"plaza\", \"ledge\", \"tweak\", \"board\", \"grant\", \"medic\", \"bacon\", \"cable\", \"brawl\", \"slunk\", \"raspy\", \"forum\", \"drone\", \"women\", \"mucus\", \"boast\", \"toddy\", \"coven\", \"tumor\", \"truer\", \"wrath\", \"stall\", \"steam\", \"axial\", \"purer\", \"daily\", \"trail\", \"niche\", \"mealy\", \"juice\", \"nylon\", \"plump\", \"merry\", \"flail\", \"papal\", \"wheat\", \"berry\", \"cower\", \"erect\", \"brute\", \"leggy\", \"snipe\", \"sinew\", \"skier\", \"penny\", \"jumpy\", \"rally\", \"umbra\", \"scary\", \"modem\", \"gross\", \"avian\", \"greed\", \"satin\", \"tonic\", \"parka\", \"sniff\", \"livid\", \"stark\", \"trump\", \"giddy\", \"reuse\", \"taboo\", \"avoid\", \"quote\", \"devil\", \"liken\", \"gloss\", \"gayer\", \"beret\", \"noise\", \"gland\", \"dealt\", \"sling\", \"rumor\", \"opera\", \"thigh\", \"tonga\", \"flare\", \"wound\", \"white\", \"bulky\", \"etude\", \"horse\", \"circa\", \"paddy\", \"inbox\", \"fizzy\", \"grain\", \"exert\", \"surge\", \"gleam\", \"belle\", \"salvo\", \"crush\", \"fruit\", \"sappy\", \"taker\", \"tract\", \"ovine\", \"spiky\", \"frank\", \"reedy\", \"filth\", \"spasm\", \"heave\", \"mambo\", \"right\", \"clank\", \"trust\", \"lumen\", \"borne\", \"spook\", \"sauce\", \"amber\", \"lathe\", \"carat\", \"corer\", \"dirty\", \"slyly\", \"affix\", \"alloy\", \"taint\", \"sheep\", \"kinky\", \"wooly\", \"mauve\", \"flung\", \"yacht\", \"fried\", \"quail\", \"brunt\", \"grimy\", \"curvy\", \"cagey\", \"rinse\", \"deuce\", \"state\", \"grasp\", \"milky\", \"bison\", \"graft\", \"sandy\", \"baste\", \"flask\", \"hedge\", \"girly\", \"swash\", \"boney\", \"coupe\", \"endow\", \"abhor\", \"welch\", \"blade\", \"tight\", \"geese\", \"miser\", \"mirth\", \"cloud\", \"cabal\", \"leech\", \"close\", \"tenth\", \"pecan\", \"droit\", \"grail\", \"clone\", \"guise\", \"ralph\", \"tango\", \"biddy\", \"smith\", \"mower\", \"payee\", \"serif\", \"drape\", \"fifth\", \"spank\", \"glaze\", \"allot\", \"truck\", \"kayak\", \"virus\", \"testy\", \"tepee\", \"fully\", \"zonal\", \"metro\", \"curry\", \"grand\", \"banjo\", \"axion\", \"bezel\", \"occur\", \"chain\", \"nasal\", \"gooey\", \"filer\", \"brace\", \"allay\", \"pubic\", \"raven\", \"plead\", \"gnash\", \"flaky\", \"munch\", \"dully\", \"eking\", \"thing\", \"slink\", \"hurry\", \"theft\", \"shorn\", \"pygmy\", \"ranch\", \"wring\", \"lemon\", \"shore\", \"mamma\", \"froze\", \"newer\", \"style\", \"moose\", \"antic\", \"drown\", \"vegan\", \"chess\", \"guppy\", \"union\", \"lever\", \"lorry\", \"image\", \"cabby\", \"druid\", \"exact\", \"truth\", \"dopey\", \"spear\", \"cried\", \"chime\", \"crony\", \"stunk\", \"timid\", \"batch\", \"gauge\", \"rotor\", \"crack\", \"curve\", \"latte\", \"witch\", \"bunch\", \"repel\", \"anvil\", \"soapy\", \"meter\", \"broth\", \"madly\", \"dried\", \"scene\", \"known\", \"magma\", \"roost\", \"woman\", \"thong\", \"punch\", \"pasty\", \"downy\", \"knead\", \"whirl\", \"rapid\", \"clang\", \"anger\", \"drive\", \"goofy\", \"email\", \"music\", \"stuff\", \"bleep\", \"rider\", \"mecca\", \"folio\", \"setup\", \"verso\", \"quash\", \"fauna\", \"gummy\", \"happy\", \"newly\", \"fussy\", \"relic\", \"guava\", \"ratty\", \"fudge\", \"femur\", \"chirp\", \"forte\", \"alibi\", \"whine\", \"petty\", \"golly\", \"plait\", \"fleck\", \"felon\", \"gourd\", \"brown\", \"thrum\", \"ficus\", \"stash\", \"decry\", \"wiser\", \"junta\", \"visor\", \"daunt\", \"scree\", \"impel\", \"await\", \"press\", \"whose\", \"turbo\", \"stoop\", \"speak\", \"mangy\", \"eying\", \"inlet\", \"crone\", \"pulse\", \"mossy\", \"staid\", \"hence\", \"pinch\", \"teddy\", \"sully\", \"snore\", \"ripen\", \"snowy\", \"attic\", \"going\", \"leach\", \"mouth\", \"hound\", \"clump\", \"tonal\", \"bigot\", \"peril\", \"piece\", \"blame\", \"haute\", \"spied\", \"undid\", \"intro\", \"basal\", \"shine\", \"gecko\", \"rodeo\", \"guard\", \"steer\", \"loamy\", \"scamp\", \"scram\", \"manly\", \"hello\", \"vaunt\", \"organ\", \"feral\", \"knock\", \"extra\", \"condo\", \"adapt\", \"willy\", \"polka\", \"rayon\", \"skirt\", \"faith\", \"torso\", \"match\", \"mercy\", \"tepid\", \"sleek\", \"riser\", \"twixt\", \"peace\", \"flush\", \"catty\", \"login\", \"eject\", \"roger\", \"rival\", \"untie\", \"refit\", \"aorta\", \"adult\", \"judge\", \"rower\", \"artsy\", \"rural\", \"shave\"];\n\nexport type Hint = '' | 'absent' | 'present' | 'correct';\n\nexport type GuessLetter = {\n  letter: string;\n  hint: Hint;\n  position: number;\n  word: number;\n}\n","import {GuessLetter} from \"./globals\";\n\ntype LetterFrequency = 'NONE' | 'ONE' | 'ONE_OR_MORE' | 'TWO_OR_MORE';\n\nexport class WordSuggester {\n\n  private readonly availableWords: string[];\n\n  constructor(availableWords: string[]) {\n    this.availableWords = availableWords;\n  }\n\n  private calcLetterFrequency(hintsForLetter: GuessLetter[]): LetterFrequency {\n    if (hintsForLetter.every(guessLetter => guessLetter.hint === 'absent')) {\n      return 'NONE';\n    }\n    // group hints by word\n    const hintsForLetterByWord: GuessLetter[][] = [];\n    for (let word = 0; word <= 5; word++) {\n      hintsForLetterByWord.push(hintsForLetter.filter(guessLetter => guessLetter.word === word));\n    }\n    // determine letter frequency\n    let result: LetterFrequency = 'ONE_OR_MORE';\n    for (let i=0; i < hintsForLetterByWord.length; i++) {\n      if (hintsForLetterByWord[i].length > 1) {\n        const numAbsent = hintsForLetterByWord[i].filter(guessLetter => guessLetter.hint === 'absent').length;\n        const numPresent = hintsForLetterByWord[i].filter(guessLetter => guessLetter.hint === 'present').length;\n        const numCorrect = hintsForLetterByWord[i].filter(guessLetter => guessLetter.hint === 'correct').length;\n        if (numPresent + numCorrect > 1) {\n          result = 'TWO_OR_MORE';\n        } else if (numPresent + numCorrect === 1 && numAbsent > 0) {\n          result = 'ONE';\n        }\n      }\n    }\n    return result;\n  }\n\n  private calcLetterCountInWord(word: string): Map<string, number> {\n    const letterCount: Map<string, number> = new Map();\n    for (let i=0; i<word.length; i++) {\n      const letter = word[i];\n      const count = letterCount.get(letter);\n      if (!count) {\n        letterCount.set(letter, 1);\n      } else {\n        letterCount.set(letter, count+1);\n      }\n    }\n    return letterCount;\n  }\n\n  suggestedWord(guessLetters: GuessLetter[]) {\n    // only interested in guessLetters with a hint\n    const hintedGuessLetters = guessLetters.filter(guessLetter => guessLetter.hint !== '');\n\n    // return no suggestion if no hints\n    if (hintedGuessLetters.length === 0) {\n      return '';\n    }\n\n    // get set of letters with a hint\n    const hintedLetters: Set<string> = new Set();\n    hintedGuessLetters.forEach(guessLetter => {\n      hintedLetters.add(guessLetter.letter);\n    });\n\n    const knownLetterFrequency: Map<string,LetterFrequency> = new Map();\n    hintedLetters.forEach(hintedLetter => {\n      const hintsForLetter = hintedGuessLetters.filter(guessLetter => guessLetter.letter === hintedLetter);\n      // console.log(`hinted letter ${hintedLetter}: `, hintsForLetter);\n      knownLetterFrequency.set(hintedLetter, this.calcLetterFrequency(hintsForLetter));\n    });\n\n    let suggestedWords = this.availableWords;\n\n    // keep words that do not contain absent letters\n    const absentLetters: string[] = [];\n    knownLetterFrequency.forEach((frequency, letter) => {\n      if (frequency === 'NONE') {\n        absentLetters.push(letter);\n      }\n    })\n    suggestedWords = suggestedWords.filter(word => absentLetters.every(letter => word.indexOf(letter) === -1));\n\n    // keep words that contain all the present and correct letters\n    const presentAndCorrectLetters = hintedGuessLetters.filter(guessLetter => ['present', 'correct'].includes(guessLetter.hint)).map(guessLetter => guessLetter.letter);\n    if (presentAndCorrectLetters.length > 0) {\n      suggestedWords = suggestedWords.filter(word => presentAndCorrectLetters.every(letter => word.indexOf(letter) !== -1));\n    }\n\n    // keep words that contain all the correct letters in the correct positions\n    const correctLetterAndPositions = hintedGuessLetters.filter(guessLetter => guessLetter.hint === 'correct').map(guessLetter => ({\n      letter: guessLetter.letter,\n      position: guessLetter.position\n    }));\n    if (correctLetterAndPositions.length > 0) {\n      suggestedWords = suggestedWords.filter(word => correctLetterAndPositions.every(letterAndPosition => {\n        return word[letterAndPosition.position] === letterAndPosition.letter;\n      }));\n    }\n\n    // keep words that contain all the present letters not in the present positions\n    const presentLetterAndPositions = hintedGuessLetters.filter(guessLetter => guessLetter.hint === 'present').map(guessLetter => ({\n      letter: guessLetter.letter,\n      position: guessLetter.position\n    }));\n    if (presentLetterAndPositions.length > 0) {\n      suggestedWords = suggestedWords.filter(word => presentLetterAndPositions.every(letterAndPosition => {\n        return word[letterAndPosition.position] !== letterAndPosition.letter;\n      }));\n    }\n\n    // keep words that contain the correct frequency of letters\n    suggestedWords = suggestedWords.filter(word => {\n      const letterCountInWord = this.calcLetterCountInWord(word);\n      let validNum = 0;\n      knownLetterFrequency.forEach((frequency, letter) => {\n        const count = letterCountInWord.get(letter) || 0;\n        if ((frequency === 'NONE' && count === 0) || (frequency === 'ONE' && count === 1) || (frequency === 'ONE_OR_MORE' && count >=1) || (frequency === 'TWO_OR_MORE' && count >= 2)) {\n          validNum++;\n        }\n      })\n      return validNum === knownLetterFrequency.size\n    });\n\n    return suggestedWords.length > 0 ? suggestedWords[0] : '';\n  }\n}","import {AVAILABLE_WORDS, GuessLetter, Hint} from \"./globals\";\nimport {WordSuggester} from \"./wordSuggester\";\n\nexport type Elems = {\n    confirmationModalElem: HTMLElement;\n    confirmationCancelButtonElem: HTMLElement;\n    confirmationContinueButtonElem: HTMLElement;\n    exitModalElem: HTMLElement;\n    exitModalReconfirmButtonElem: HTMLElement;\n    infoModalElem: HTMLElement;\n    infoModalOKButtonElem: HTMLElement;\n    resetButtonElem: HTMLElement;\n    infoButtonElem: HTMLElement;\n    keyElems: NodeListOf<Element>;\n    guessLetterElems: NodeListOf<Element>;\n    suggestionLetterElems: NodeListOf<Element>;\n    suggestionUseButtonElem: HTMLElement;\n}\n\nexport type State = {\n    currentGuessLetterIndex: number;\n    guessLetters: GuessLetter[];\n    suggestion: string;\n}\n\nclass WordleHelper {\n\n    wordSuggester: WordSuggester;\n    elems: Elems;\n    state: State;\n\n    // ----------------------------------------\n    //                Constants\n    // ----------------------------------------\n    static AVAILABLE_HINTS: Hint[] = ['absent', 'present', 'correct'];\n\n    constructor() {\n        this.wordSuggester = new WordSuggester(AVAILABLE_WORDS);\n        this.elems = {\n            confirmationModalElem: document.getElementById('confirmationModal'),\n            confirmationCancelButtonElem: document.getElementById('confirmationModalCancelButton'),\n            confirmationContinueButtonElem: document.getElementById('confirmationModalContinueButton'),\n            exitModalElem: document.getElementById('exitModal'),\n            exitModalReconfirmButtonElem: document.getElementById('exitModalReconfirmButton'),\n            infoModalElem: document.getElementById('infoModal'),\n            infoModalOKButtonElem: document.getElementById('infoModalOKButton'),\n            resetButtonElem: document.getElementById('resetButton'),\n            infoButtonElem: document.getElementById('infoButton'),\n            keyElems: document.querySelectorAll('.keyboard .key'),\n            guessLetterElems: document.querySelectorAll('.guesses .guessLetter'),\n            suggestionLetterElems: document.querySelectorAll('.suggestionWord .guessLetter'),\n            suggestionUseButtonElem: document.getElementById('useButton'),\n        }\n        this.state = {\n            currentGuessLetterIndex: 0,\n            guessLetters: new Array(this.elems.guessLetterElems.length),\n            suggestion: ''\n        }\n        for (let i=0; i< this.elems.guessLetterElems.length; i++) {\n            this.state.guessLetters[i] = {letter: '', hint: '', position: (i % 5), word: Math.floor(i / 5)};\n        }\n        this.elems.confirmationCancelButtonElem.addEventListener('click', this.onConfirmationCancelButtonClicked)\n        this.elems.confirmationContinueButtonElem.addEventListener('click', this.onConfirmationContinueButtonClicked)\n        this.elems.exitModalReconfirmButtonElem.addEventListener('click', this.onExitModalReconfirmButtonClicked)\n        this.elems.infoModalOKButtonElem.addEventListener('click', this.onInfoModalOKButtonClicked)\n        this.elems.resetButtonElem.addEventListener('click', this.onResetButtonClicked)\n        this.elems.infoButtonElem.addEventListener('click', this.onInfoButtonClicked)\n        this.elems.keyElems.forEach(elem => elem.addEventListener('click', this.onKeyClicked));\n        this.elems.guessLetterElems.forEach((elem, index) => elem.addEventListener('click', this.onGuessLetterClicked(index)));\n        this.elems.suggestionUseButtonElem.addEventListener('click', this.onSuggestionUseButtonClicked)\n    }\n\n    // ----------------------------------------\n    //             Event Handlers\n    // ----------------------------------------\n\n    onConfirmationCancelButtonClicked = (event) => {\n        this.elems.exitModalElem.classList.remove('hide');\n    }\n\n    onConfirmationContinueButtonClicked = (event) => {\n        this.elems.confirmationModalElem.classList.add('hide');\n        this.elems.infoModalElem.classList.remove('hide');\n    }\n\n    onExitModalReconfirmButtonClicked = (event) => {\n        this.elems.exitModalElem.classList.add('hide');\n    }\n\n    onInfoModalOKButtonClicked = (event) => {\n        this.elems.infoModalElem.classList.add('hide');\n    }\n\n    onResetButtonClicked = (event) => {\n        while (this.state.currentGuessLetterIndex !== 0) {\n            this.removeLetter();\n        }\n        this.updateSuggestion();\n    };\n\n    onInfoButtonClicked = (event) => {\n        this.elems.infoModalElem.classList.remove('hide');\n    }\n\n    onKeyClicked = (event) => {\n        const key = event.currentTarget.dataset.key;\n        if (this.state.currentGuessLetterIndex === 0 && key === 'BACKSPACE') {\n            return;\n        }\n        if (this.state.currentGuessLetterIndex === this.elems.guessLetterElems.length && key !== 'BACKSPACE') {\n            return;\n        }\n        if (key === 'BACKSPACE') {\n            this.removeLetter();\n        } else {\n            this.addLetter(key);\n        }\n\n        this.updateSuggestion();\n    };\n\n    onGuessLetterClicked = (index) => {\n        return (event) => {\n            if (index >= this.state.currentGuessLetterIndex) {\n                return;\n            }\n            this.elems.guessLetterElems[index].classList.remove('hintRequired');\n\n            const currentHintIndex = WordleHelper.AVAILABLE_HINTS.indexOf(this.state.guessLetters[index].hint);\n            const oldHint = (currentHintIndex !== -1) ? WordleHelper.AVAILABLE_HINTS[currentHintIndex] : '';\n            const newHintIndex = (currentHintIndex + 1) % 3;\n            const newHint = WordleHelper.AVAILABLE_HINTS[newHintIndex];\n\n            this.elems.guessLetterElems[index].classList.remove(`hint-${oldHint}`);\n            this.elems.guessLetterElems[index].classList.add(`hint-${newHint}`);\n            this.state.guessLetters[index].hint = newHint;\n\n            // TODO validate hints are not contradictory and mark invalid hints as 'hintRequired'\n\n            this.updateSuggestion();\n        }\n    };\n\n    onSuggestionUseButtonClicked = (event) => {\n        if (this.isSuggestionUseDisabled()) {\n            return;\n        }\n        this.state.suggestion.split('').forEach(this.addLetter);\n    };\n\n    // ----------------------------------------\n    //               Functions\n    // ----------------------------------------\n\n    initialHint = (letter, position): Hint => {\n        // TODO does not handle the case when there were multiple hints for the same letter in a single word: one being 'absent' and the other being 'correct' or 'present'\n        // TODO for now return ''\n        return '';\n        /*\n        // determine if letter is known to 'absent'\n        const absentLetters = this.state.guessLetters.filter(guessLetter => guessLetter.hint === 'absent').map(guessLetter => guessLetter.letter);\n        if (absentLetters.includes(letter)) {\n            return 'absent';\n        }\n        // determine if letter is known to be 'present' or 'correct' for this position\n        const matchingGuessLetters = this.state.guessLetters.filter(guess => guess.letter === letter && guess.position === position);\n        return matchingGuessLetters.length > 0 ? matchingGuessLetters[0].hint : '';\n        */\n    };\n\n    removeLetter = () => {\n        this.state.currentGuessLetterIndex--;\n        this.elems.guessLetterElems[this.state.currentGuessLetterIndex].textContent = '';\n        this.elems.guessLetterElems[this.state.currentGuessLetterIndex].classList.remove('hintRequired');\n        this.elems.guessLetterElems[this.state.currentGuessLetterIndex].classList.remove(`hint-${this.state.guessLetters[this.state.currentGuessLetterIndex].hint}`);\n        this.state.guessLetters[this.state.currentGuessLetterIndex].letter = '';\n        this.state.guessLetters[this.state.currentGuessLetterIndex].hint = '';\n    }\n\n    addLetter = (letter) => {\n        const position = this.state.currentGuessLetterIndex % 5;\n        const hint = this.initialHint(letter, position);\n\n        this.elems.guessLetterElems[this.state.currentGuessLetterIndex].textContent = letter;\n        this.elems.guessLetterElems[this.state.currentGuessLetterIndex].classList.add(hint === '' ? 'hintRequired' : `hint-${hint}`);\n        this.state.guessLetters[this.state.currentGuessLetterIndex].letter = letter;\n        this.state.guessLetters[this.state.currentGuessLetterIndex].hint = hint;\n        this.state.currentGuessLetterIndex++;\n    };\n\n    suggestionHint = (letter, position) => {\n        // TODO fix bug: handle hints for duplicate letters in a suggested word, ie. if a letter is not known to appear twice in the word, then don't hint it twice\n        //      guess #1:            P E A R L\n        //                           c a p p a\n        //      .\n        //      guess #2:            P A R T Y\n        //                           c c c a a\n        //      recommends...\n        //                           P A R K A\n        //                           c c c _ p\n        //      .\n        //      should not hint that the last 'A' is present, since the word is not known to contain duplicate 'A' letters\n\n        // TODO return any empty string for now, until fixed\n        /*\n        // determine if letter is known to be 'correct' or 'present' for this position\n        const matchingGuessLetters = this.state.guessLetters.filter(guess => guess.letter === letter && guess.position === position);\n        if (matchingGuessLetters.length > 0) {\n            return matchingGuessLetters[0].hint;\n        }\n        // determine if letter is 'present'\n        const presentLetters = this.state.guessLetters.filter(guessLetter => guessLetter.hint === 'present').map(guessLetter => guessLetter.letter);\n        if (presentLetters.includes(letter)) {\n            return 'present';\n        }\n        */\n        return '';\n    };\n\n    isSuggestionUseDisabled = () => {\n        return this.state.currentGuessLetterIndex > 20\n            || this.state.currentGuessLetterIndex % 5 !== 0\n            || this.state.suggestion === ''\n            || (this.state.currentGuessLetterIndex > 0 && this.state.guessLetters.slice(this.state.currentGuessLetterIndex - 5, this.state.currentGuessLetterIndex).map(g => g.letter).join('') === this.state.suggestion)\n            || this.state.guessLetters.some(guessLetter => guessLetter.letter !== '' && guessLetter.hint === '');\n    };\n\n    updateSuggestion = () => {\n        this.state.suggestion = this.wordSuggester.suggestedWord(this.state.guessLetters);\n\n        // show suggestion\n        const suggestionLetters = (this.state.suggestion === '') ? new Array(5).fill('') : this.state.suggestion.split('');\n        this.elems.suggestionLetterElems.forEach((elem, index) => {\n            elem.textContent = suggestionLetters[index];\n            WordleHelper.AVAILABLE_HINTS.forEach(hint => elem.classList.remove(`hint-${hint}`));\n            const hint = this.suggestionHint(suggestionLetters[index], index);\n            if (hint !== '') {\n                elem.classList.add(`hint-${hint}`);\n            }\n        });\n\n        // enable/disable the 'USE' button\n        if (this.isSuggestionUseDisabled()) {\n            this.elems.suggestionUseButtonElem.classList.add('disabled');\n        } else {\n            this.elems.suggestionUseButtonElem.classList.remove('disabled');\n        }\n    };\n}\n\nwindow.onload = () => {\n    new WordleHelper();\n};\n"],"names":["$762dc3ee7ef38b25$export$ded8ba39eb80187","$11a7facefd4d9daa$export$18175447428f6cb3","availableWords","this","calcLetterFrequency","hintsForLetter","every","guessLetter","hint","hintsForLetterByWord","word","push","filter","result","i","length","numAbsent","numPresent","numCorrect","calcLetterCountInWord","letterCount","Map","letter","count","get","set","suggestedWord","guessLetters","hintedGuessLetters","hintedLetters","Set","forEach","add","knownLetterFrequency","hintedLetter","suggestedWords","absentLetters","frequency","indexOf","presentAndCorrectLetters","includes","map","correctLetterAndPositions","position","letterAndPosition","presentLetterAndPositions","letterCountInWord","validNum","size","$f43313d21d3fd8e2$var$WordleHelper","onConfirmationCancelButtonClicked","event","elems","exitModalElem","classList","remove","onConfirmationContinueButtonClicked","confirmationModalElem","infoModalElem","onExitModalReconfirmButtonClicked","onInfoModalOKButtonClicked","onResetButtonClicked","state","currentGuessLetterIndex","removeLetter","updateSuggestion","onInfoButtonClicked","onKeyClicked","key","currentTarget","dataset","guessLetterElems","addLetter","onGuessLetterClicked","index","currentHintIndex","AVAILABLE_HINTS","oldHint","newHintIndex","newHint","onSuggestionUseButtonClicked","isSuggestionUseDisabled","suggestion","split","initialHint","textContent","suggestionHint","slice","g","join","some","wordSuggester","suggestionLetters","Array","fill","suggestionLetterElems","elem","hint1","suggestionUseButtonElem","document","getElementById","confirmationCancelButtonElem","confirmationContinueButtonElem","exitModalReconfirmButtonElem","infoModalOKButtonElem","resetButtonElem","infoButtonElem","keyElems","querySelectorAll","Math","floor","addEventListener","window","onload"],"version":3,"file":"index.e342fc59.js.map"}